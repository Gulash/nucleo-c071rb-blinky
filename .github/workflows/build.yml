name: Build Firmware

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ARM toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi binutils-arm-none-eabi

      - name: Build firmware
        run: |
          set -euxo pipefail

          echo "Building for NUCLEO-C071RB..."

          # Quick sanity check for required files
          if [ ! -f STM32C071RBTx.ld ]; then
            echo "ERROR: linker script STM32C071RBTx.ld not found in repo root"
            ls -la
            exit 1
          fi
          if [ ! -f main.c ]; then
            echo "ERROR: main.c not found in repo root"
            ls -la
            exit 1
          fi
          if [ ! -f startup.c ]; then
            echo "ERROR: startup.c not found in repo root"
            ls -la
            exit 1
          fi

          # Compile
          arm-none-eabi-gcc -c -mcpu=cortex-m0plus -mthumb -O2 -g main.c -o main.o
          arm-none-eabi-gcc -c -mcpu=cortex-m0plus -mthumb -O2 -g startup.c -o startup.o

          # Link (will fail with clear output if something's wrong)
          arm-none-eabi-gcc -mcpu=cortex-m0plus -mthumb \
            -T STM32C071RBTx.ld \
            -nostdlib \
            -Wl,--gc-sections \
            -Wl,-Map=firmware.map \
            main.o startup.o \
            -o firmware.elf

          # Create binary & hex
          arm-none-eabi-objcopy -O binary firmware.elf firmware.bin
          arm-none-eabi-objcopy -O ihex firmware.elf firmware.hex

          # Show size and workspace for debugging
          arm-none-eabi-size firmware.elf || true
          echo "Workspace root: $GITHUB_WORKSPACE"
          pwd
          echo "Top-level files:"
          ls -la
          echo "Recursive file list:"
          ls -R

      - name: Verify artifacts exist (fail fast)
        run: |
          set -eu
          for f in firmware.bin firmware.hex firmware.elf firmware.map; do
            if [ ! -f "$f" ]; then
              echo "ERROR: expected artifact '$f' not found in $(pwd)"
              exit 1
            fi
          done
          echo "All artifacts present."

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: |
            firmware.bin
            firmware.hex
            firmware.elf
            firmware.map
          if-no-files-found: error
